const fs = require("fs");
const path = require("path");

// Debugging helper
function log(message) {
  console.log(message);
  fs.appendFileSync("build.log", message + "\n");
}

// Clear previous log
if (fs.existsSync("build.log")) {
  fs.unlinkSync("build.log");
}

/**
 * Ensures a directory exists
 */
function ensureDirSync(dir) {
  log(`Ensuring directory exists: ${dir}`);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    log(`Created directory: ${dir}`);
  } else {
    log(`Directory already exists: ${dir}`);
  }
}

/**
 * Clears a directory by removing and recreating it
 */
function clearDirSync(dir) {
  log(`Clearing directory: ${dir}`);
  if (fs.existsSync(dir)) {
    fs.rmSync(dir, { recursive: true, force: true });
    log(`Removed directory: ${dir}`);
  }
  fs.mkdirSync(dir, { recursive: true });
  log(`Created directory: ${dir}`);
}

/**
 * Recursively copies files from source to destination
 */
function copyFilesSync(srcDir, destDir) {
  log(`Copying from ${srcDir} to ${destDir}`);
  ensureDirSync(destDir);
  
  if (!fs.existsSync(srcDir)) {
    log(`Source directory does not exist: ${srcDir}`);
    return;
  }
  
  try {
    const entries = fs.readdirSync(srcDir, { withFileTypes: true });
    
    for (const entry of entries) {
      const srcPath = path.join(srcDir, entry.name);
      const destPath = path.join(destDir, entry.name);
      
      if (entry.isDirectory()) {
        log(`Found directory: ${entry.name}`);
        copyFilesSync(srcPath, destPath);
      } else {
        log(`Copying file: ${entry.name}`);
        fs.copyFileSync(srcPath, destPath);
        log(`Copied file to: ${destPath}`);
      }
    }
  } catch (error) {
    log(`Error copying files: ${error.message}`);
  }
}

/**
 * Run webpack to process SCSS files and generate minified CSS
 */
function runWebpack() {
  log("Running webpack for SCSS compilation and CSS minification...");
  try {
    const { execSync } = require('child_process');
    execSync('npx webpack', { stdio: 'inherit' });
    log("Webpack build completed successfully");
    return true;
  } catch (error) {
    log(`Error running webpack: ${error.message}`);
    return false;
  }
}

/**
 * Get all theme directories
 */
function getThemeDirs() {
  const styleDir = path.resolve(__dirname, 'src/style');
  return fs.readdirSync(styleDir)
    .filter(item => fs.statSync(path.join(styleDir, item)).isDirectory());
}

/**
 * Process CSS files in a theme directory - copies and creates minified versions
 */
function processCssFiles(themeDir) {
  const srcCssDir = path.join('src/style', themeDir, 'css');
  const destCssDir = path.join('wwwroot/style', themeDir, 'css');
  
  ensureDirSync(destCssDir);
  
  if (!fs.existsSync(srcCssDir)) {
    log(`Source CSS directory does not exist: ${srcCssDir}`);
    return;
  }
  
  try {
    const cssFiles = fs.readdirSync(srcCssDir)
      .filter(file => file.endsWith('.css'));
    
    for (const cssFile of cssFiles) {
      const srcCssPath = path.join(srcCssDir, cssFile);
      const destCssPath = path.join(destCssDir, cssFile);
      
      // Copy original CSS file
      log(`Copying CSS file: ${cssFile}`);
      fs.copyFileSync(srcCssPath, destCssPath);
      
      // Check if minified version exists in wwwroot (generated by webpack)
      const minCssFile = cssFile.replace('.css', '.min.css');
      const minCssPath = path.join(destCssDir, minCssFile);
      
      if (!fs.existsSync(minCssPath)) {
        log(`Note: Minified version ${minCssFile} was not generated by webpack`);
      }
    }
  } catch (error) {
    log(`Error processing CSS files: ${error.message}`);
  }
}

// Main execution
log("Starting build process...");

try {
  // First convert CSS to SCSS if needed
  if (!fs.existsSync("src/style/mom/scss") || !fs.existsSync("src/style/texecon/scss")) {
    log("Running CSS to SCSS conversion...");
    require('./convert-css-to-scss');
  }

  // Clean wwwroot directory
  log("Cleaning wwwroot directory...");
  clearDirSync("wwwroot");

  // Create style directory
  log("Creating style directory...");
  ensureDirSync("wwwroot/style");
  
  // Get all theme directories
  const themeDirs = getThemeDirs();
  
  // Create theme subdirectories
  log("Creating style subdirectories...");
  for (const themeDir of themeDirs) {
    ensureDirSync(`wwwroot/style/${themeDir}`);
  }
  
  // Run webpack to process SCSS and generate CSS/min.css files
  const webpackSuccess = runWebpack();
  
  // Process each theme directory
  for (const themeDir of themeDirs) {
    log(`Processing theme directory: ${themeDir}`);
    
    // Copy non-CSS files from the theme directory
    log(`Copying ${themeDir} directory structure...`);
    if (fs.existsSync(`src/style/${themeDir}`)) {
      // Copy everything except the css and scss directories
      const entries = fs.readdirSync(`src/style/${themeDir}`, { withFileTypes: true });
      
      for (const entry of entries) {
        if (entry.name !== 'css' && entry.name !== 'scss') {
          const srcPath = path.join(`src/style/${themeDir}`, entry.name);
          const destPath = path.join(`wwwroot/style/${themeDir}`, entry.name);
          
          if (entry.isDirectory()) {
            copyFilesSync(srcPath, destPath);
          } else {
            ensureDirSync(path.dirname(destPath));
            fs.copyFileSync(srcPath, destPath);
          }
        }
      }
      
      // Process CSS files separately (copy original and ensure minified exists)
      processCssFiles(themeDir);
    } else {
      log(`src/style/${themeDir} does not exist`);
    }
  }
  
  // Copy root style files
  log("Copying root style files...");
  const rootStyleFiles = fs.readdirSync("src/style")
    .filter(item => !fs.statSync(path.join("src/style", item)).isDirectory());
  
  for (const file of rootStyleFiles) {
    const srcFile = path.join("src/style", file);
    const destFile = path.join("wwwroot/style", file);
    log(`Copying root style file: ${file}`);
    fs.copyFileSync(srcFile, destFile);
  }

  // Copy js directory 
  log("Copying js directory...");
  ensureDirSync("wwwroot/js");
  copyFilesSync("src/js", "wwwroot/js");

  // Copy assets to appropriate locations if needed
  log("Copying assets...");
  if (fs.existsSync("src/assets")) {
    ensureDirSync("wwwroot/assets");
    copyFilesSync("src/assets", "wwwroot/assets");
  }

  log("Build process completed successfully.");
} catch (error) {
  log(`Error in build process: ${error.message}`);
  log(`Stack trace: ${error.stack}`);
}
